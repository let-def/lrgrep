{
  let rec longident_to_string = function
    | Longident.Lident n -> n
    | Longident.Lapply (a, b) ->
      longident_to_string a ^ "(" ^ longident_to_string b ^ ")"
    | Longident.Ldot (a, n) ->
      longident_to_string a ^ "." ^ n

  let report_currified_constructor ?outer inner (token : Parser_raw.token) =
    let inner, _, _ = inner in
    let token = match token with
      | UNDERSCORE -> "_"
      | LIDENT u | UIDENT u -> u
      | LPAREN -> "..."
      | _ -> assert false
    in
    let inner_msg = longident_to_string inner ^ " (..., " ^ token ^ ")" in
    "Issue #10990: arguments of n-ary constructors should be put between parentheses, e.g. " ^
    match outer with
    | Some (outer, _, _) -> longident_to_string outer ^ " (" ^ inner_msg ^ ")"
    | None -> inner_msg
}

rule error_message token = parse error

(* let x = 5 ; let y = 6 let z = 7 *)

| expr as e; SEMI : ELSE
  partial {
    match e with
    | {pexp_desc = Pexp_ifthenelse(_, _, None); _}, startp, _endp -> (
      Some ("The semicolon line "
            ^ string_of_int startp.pos_lnum
            ^ ", character "
            ^ string_of_int (startp.pos_cnum - startp.pos_bol)
            ^ " terminates the `if ... then ...` expression. \
            Remove it to add an else branch.")
      )
    | _ -> None
  }

| [label_declaration: mutable_flag LIDENT . COLON] : EQUAL {
    "Expecting ':' to declare the type of a record field, not '='"
  }

| structure_item; !; SEMI as semi;
  LET; ext; list(attribute); rec_flag; let_binding_body; !
  { let (), startp, _endp = semi in
    "Might be due to the semicolon line "
    ^ string_of_int startp.pos_lnum
    ^ ", character "
    ^ string_of_int (startp.pos_cnum - startp.pos_bol)
  }

(* Replace builtin grammatical rule reporting unclosed parenthesis *)
| LPAREN as lp; [. RPAREN]; !
  { let (), startp, _endp = lp in
    "Unclosed parenthesis at line "
    ^ string_of_int startp.pos_lnum
    ^ ", character "
    ^ string_of_int (startp.pos_cnum - startp.pos_bol)
  }

(* https://github.com/ocaml/ocaml/issues/11108
   Report when a keyword has been typed in a context where a lowercase
   identifier is expected. *)
| [. LIDENT]; !
  partial { match Lexer_raw.as_keyword token with
    | None -> None
    | Some kw ->
      Some ("`" ^ kw ^ "' is a keyword and cannot appear in this context (try " ^ kw ^ "_)")
  }

(* https://github.com/ocaml/ocaml/issues/5068 *)
| ([. UIDENT] | [. TYPE] | [. REC]); !
  { "Expecting `type' or a module name beginning with an uppercase letter"
  }

(* https://discuss.ocaml.org/t/syntax-error-compiling-code-with-functor-module/6352 *)
| [. seq_expr ]; ! : MODULE
  {  "`module' keyword cannot appear in an expression, \
       use `(module M)' to pack a first class-module \
       or `let module M = ... in ...' to define a local module"
  }

(* https://github.com/ocaml/ocaml/issues/11445 *)
| OF; constructor_arguments; ! : MINUSGREATER
  { "Issue #11445: in constructor arguments, \
     arrow types should be wrapped between parentheses"
  }

| [. IN]; !
  { "Expecting `in'" }

| constr_longident as outer; constr_longident as inner;
  [pattern_gen: constr_longident pattern .]; !
  : UNDERSCORE | LIDENT | UIDENT | LPAREN
  { report_currified_constructor ~outer inner token }

| constr_longident as inner;
  [pattern_gen: constr_longident pattern .]; !
  : UNDERSCORE | LIDENT | UIDENT | LPAREN
  { report_currified_constructor inner token }
